rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // Helper Functions  
    // ========================================
    
    function isAuthenticated() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    function getUserEmail() {
      return request.auth.token.email;
    }
    
    // GroupIdで渡されたグループのロールを返す
    function getGroupRole(groupId){
      return get(/databases/$(database)/documents/groups/$(groupId)/members/$(getUserEmail())).data.role
    }
    
    // GroupIdで渡されたグループのMember（trueならview↑が確定する）
    function isGroupMember(groupId){
      return exists(/databases/$(database)/documents/groups/$(groupId)/members/$(getUserEmail()))
    }
    
    // ScoutIdで渡されたスカウトの所属団がわかる
    // 基本的にはresource.data.personal.belongsで参照しよう。
    function getScoutIdGroup(scoutId){
    	return get(/databases/$(database)/documents/scouts/$(scoutId)).data.personal.belongs
    }
    
    // 非効率になりがちなので非推奨
    function isTheScoutEditable(scoutId){
    	let scoutBelongs = getScoutIdGroup(scoutId);
      let userBelongsId = getGroupRole(scoutBelongs);
      return userBelongsId == "admin" || userBelongsId == "edit"
    }
    
    // こっち
    function isEditor(groupId){
    	let userBelongsId = getGroupRole(groupId);
      return userBelongsId == "admin" || userBelongsId == "edit"
    }
    
    // アプリ管理者かチェック
    function isAppAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // ========================================
    // Scouts Collection
    // ========================================
    match /scouts/{scoutId}{
      // 読み取り権限（個別とクエリ両方）
    	allow read :if isAuthenticated() &&
      	isGroupMember(resource.data.personal.belongs);
        
      allow update, delete:if isAuthenticated() && isEditor(resource.data.personal.belongs)
      
      allow create:if isAuthenticated() && isEditor(request.resource.data.personal.belongs);
      
      match /{document=**} {
      	allow read :if isAuthenticated() && 
      		isGroupMember(getScoutIdGroup(scoutId)); 
	      allow write:if isAuthenticated() && isTheScoutEditable(scoutId)
      }
    }


    // ========================================
    // Users Collection
    // ========================================
    
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // ========================================
    // Groups Collection
    // ========================================
    
    match /groups/{groupId} {
      allow read: if isAuthenticated() && 
        isGroupMember(groupId);

      allow update: if isAuthenticated() &&
        getGroupRole(groupId) == 'admin';
			
      allow create, delete: if isAppAdmin()

      
      // 管理者サブコレクション
      match /members/{adminId} {
        allow read: if isAuthenticated() && (
          getUserEmail() == adminId
        );
        
        allow write: if isAuthenticated() && 
          exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.email)) &&
          get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.email)).data.role == 'admin';

        // 最初の管理者登録（グループ作成者）
        allow create: if isAuthenticated() && request.auth.uid == adminId;
      }
    }


    // ========================================
    // App Admins Collection
    // ========================================
    
    match /admins/{adminId} {
      allow read , write: if isAppAdmin()
    }

    // ========================================
    // Default Deny All
    // ========================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 